= AppConfig

An easy to use, customizable library to easily store and retrieve application
(or library) configuration, API keys or basically anything in 'key/value' pairs.


== Usage

Usage is simple.  Just pass either a hash of options, or a block, to
AppConfig.setup.  See AppConfig::Base for a list of valid storage methods.

=== AppConfig::Storage::YAML

Given this YAML file:

  ---
  admin_email: 'admin@example.com'
  api_name:    'Supr Webz 2.0'
  api_key:     'SUPERAWESOMESERVICE'

Use it like so:

  require 'app_config'

  AppConfig.setup do |config|
    config[:storage_method] = :yaml
    config[:path] = '/path/to/app_config.yml'
    # ..or..
    config[:uri] = 'yaml://path/to/app_config.yml'
  end

  # Later on...
  # Strings or symbols as keys.
  AppConfig['admin_email'] # => 'admin@example.com'
  AppConfig[:api_name]     # => 'Supr Webz 2.0'
  AppConfig[:api_key]      # => 'SUPERAWESOMESERVICE'

=== AppConfig::Storage::Sqlite

  AppConfig.setup do |config|
    config[:storage_method] = :sqlite
    config[:database] = '/path/to/database.sqlite3'
    # ..or..
    config[:uri] = 'sqlite://path/to/database.sqlite3'

    config[:table] = 'app_config' # defaults to 'app_config'
  end

  AppConfig[:column]  # => 'value'


== Rails Mode

As of version 0.3.1, there's a 'Rails mode' where you can organize
the config file sort of like Rails' database config.

*NOTE:* This might get renamed to a more Rack-ish 'environment' mode.

  # config/app_config.yml
  development:
    name: 'Dev Mode'

  production:
    name: 'Production Mode'

Then set the <tt>:rails</tt> option to true (it's false by default).

  # config/initializers/load_app_config.rb
  AppConfig.setup do |config|
    config[:rails] = true
    config[:uri] = 'yaml://path/to/app_config.yml'
  end

  # If Rails.env is 'production'
  AppConfig[:name] = 'Production Mode'
